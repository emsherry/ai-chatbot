name: Deploy AI Chatbot to EC2

on:
  push:
    branches:
      - ec2-backup

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout with full history
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # fetch all commits so HEAD~1 exists

      # Step 2: Determine changed services
      - name: Determine changed services
        id: changes
        run: |
          # If we have more than 1 commit, get diff between last 2
          if [ "$(git rev-list --count HEAD)" -gt 1 ]; then
            CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
          else
            # First commit â€” assume everything changed
            CHANGED_FILES=$(git ls-files)
          fi

          SERVICES=""
          if echo "$CHANGED_FILES" | grep -q '^frontend/'; then
            SERVICES="$SERVICES frontend"
          fi
          if echo "$CHANGED_FILES" | grep -q '^backend/'; then
            SERVICES="$SERVICES backend"
          fi

          if [ -z "$SERVICES" ]; then
            echo "No frontend or backend changes detected."
          fi

          echo "services=$SERVICES" >> $GITHUB_OUTPUT

      # Step 3: Setup SSH
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      # Step 4: Deploy to EC2
      - name: Deploy to EC2
        if: steps.changes.outputs.services != ''
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} bash << EOF
            set -e

            cd ~/ai-chatbot

            # Sync with GitHub branch
            git fetch origin
            git checkout ec2-backup
            git reset --hard origin/ec2-backup

            # Deploy only the changed services
            for SERVICE in ${{ steps.changes.outputs.services }}; do
              echo "Deploying service: \$SERVICE"

              # Remove old container if exists
              if docker ps -a --format '{{.Names}}' | grep -q "\$SERVICE"; then
                docker-compose rm -sf \$SERVICE
              fi

              # Remove dangling images
              docker image prune -f

              # Build & start service
              docker-compose build \$SERVICE
              docker-compose up -d \$SERVICE
            done

            # Optional: Remove unused images/containers to avoid clutter
            docker system prune -f
          EOF
